<svg version="1.1" id="svg10" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve"><style>.st0{display:none}.st3{display:inline}</style><script id="mesh_polyfill" type="text/javascript">!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();</script><path d="M134.51 405.09c-11.79 5.94-20.54 13.67-29.97 20.38-6.88 4.9-13.61 10.12-21.85 12.66-5.89 1.82-8.14.06-6.95-5.96 1.13-5.76 4.23-10.81 7.44-15.63 5.72-8.59 11.75-16.96 17.55-25.49 2.49-3.67 5.32-7.2 6.72-12.23-7.89-.67-13.75 3.93-20.04 6.58-9.49 3.99-18.59 8.86-27.93 13.17-2.84 1.31-5.78 2.54-9.09 2.51-6.08-.05-8.16-3.02-5.49-8.58 2.43-5.06 6.24-9.17 10.17-13.11 9.17-9.2 18.36-18.38 27.47-27.64 1.37-1.39 4.01-2.7 2.62-5.13-1.23-2.12-3.35-.38-5.03 0-15.68 3.53-31.33 7.2-47.05 10.6-3.91.85-8.93 3.11-11.32-1.9-2.28-4.76.8-8.77 4.68-11.51 11.43-8.11 22.98-16.08 34.56-23.97 3.08-2.11 5.8-4.44 8.59-8.27-7.73-2.33-14.85-1.31-21.81-1.15-12.18.29-24.35 1.23-36.54 1.63-2.44.08-6.31 2.67-7.19-1.93-.73-3.86-.69-7.79 3.85-10.24 6.79-3.64 13.96-6.26 21.1-9.02 7.38-2.86 14.77-5.69 22.04-8.78 4.04-1.72 8.37-3.24 11.55-7.84-10.49-3.9-21.11-5.16-31.6-6.93-7.55-1.28-15.19-2.08-22.71-3.48-3.88-.72-7.78-1.84-7.55-7.41.19-4.92 3.23-6.15 7.14-6.9 13.73-2.6 27.47-5.19 41.19-7.87 4.07-.8 8.27-1.42 12.22-4.5-5.22-4.97-11.8-6.91-17.9-9.5-8.5-3.59-17.26-6.53-25.87-9.85-2.2-.85-4.36-1.92-6.37-3.16-3.16-1.95-5.17-4.74-4.15-8.64 1.04-3.93 4.52-4.02 7.68-4.09 9.55-.19 19.1-.03 28.65-.37 8.11-.29 16.23-1.1 25.58-1.77-5-7.04-11.8-9.49-17.47-13.27-8.8-5.86-18-11.1-26.96-16.72-2.22-1.41-4.2-3.23-6.21-4.92-2.95-2.48-4.22-5.88-2.59-9.23 1.52-3.13 5.08-2.3 7.87-1.74 17.84 3.51 35.66 7.15 53.5 10.72 1.79.35 3.63.43 6 .7-.56-4.12-3.45-6.08-5.62-8.48-9.1-10.01-20.17-18.05-28.67-28.67-.99-1.25-2.11-2.41-2.92-3.75-1.82-3.02-3.35-6.26-.7-9.53 2.38-2.92 5.61-2.33 8.8-1.53 10.32 2.56 19.75 7.35 29.46 11.47 6.47 2.75 12.84 5.91 20.89 7.12-2.79-8-7.71-13.72-12.23-19.61-6.44-8.4-13.03-16.69-17.87-26.17-1.44-2.79-2.97-5.78-.38-8.83 2.35-2.78 5.35-1.76 8.13-1.2 8.54 1.69 15.22 7.07 22.26 11.67 7.52 4.92 14.96 9.96 22.55 14.79 1.44.91 3.61 2.2 4.97.3.62-.88-.06-3.03-.69-4.36-5.94-12.65-12.23-25.15-17.92-37.91-2.14-4.82-6.08-11.21-.67-15.3 5.64-4.25 11.27.8 15.39 4.65 9.68 9.04 18.73 18.73 28.19 28.03 1.77 1.74 3.27 4.23 6.85 4.23.81-7.84-1.98-15.04-3.56-22.31-2.41-11.07-5.65-21.96-8.14-33.01-.81-3.61-2.81-8.48 1.57-10.76 4.74-2.48 8.46.86 11.56 4.49 9.49 11.13 15.7 24.5 24.55 36.06 2.92 3.82 4.9 11.21 9.53 10 3.56-.94 1.49-8.58 1.41-13.17-.27-14.04-1.12-28.07-1.44-42.11-.06-2.41-2.22-6.45 2.51-7.01 3.83-.45 7.98-1.04 10.67 3.24 3.53 5.67 5.22 12.09 7.6 18.22 3.72 9.58 7.44 19.16 11.34 28.68.75 1.84 1.79 4.26 4.39 3.94 2.57-.32 2.75-2.79 3.29-4.82 3.37-12.55 3.83-25.57 6.29-38.26.56-2.84 1.04-5.72 1.85-8.5 1.25-4.23 4.62-5.48 8.62-5.54 4.2-.06 5.19 2.91 5.8 6.21 2.52 13.75 5.01 27.5 7.62 41.22.62 3.27.67 7.73 4.97 7.92 3.59.16 4.65-4.06 5.75-6.85 4.04-10.3 7.65-20.78 11.56-31.14 1.77-4.68 3.78-9.28 5.88-13.83 1.57-3.42 4.73-4.1 8.06-3.67 4.1.53 3.75 3.85 3.7 6.74-.19 10.08-.29 20.15-.78 30.21-.46 9.29-1.05 18.54 1.29 27.8 3.82.5 4.76-2.78 6.21-5.03 8.06-12.42 15.95-24.94 23.97-37.38 1.28-1.98 2.81-3.85 4.42-5.57 2.67-2.83 6.32-3.51 9.52-1.98 3.23 1.55 3.27 5.22 2.57 8.43-3.15 14.42-6.32 28.84-9.65 43.23-.96 4.18-2.7 10.41.05 11.93 3.96 2.17 6.42-3.9 9.25-6.63 9.74-9.37 17.31-20.79 27.8-29.46 2.01-1.66 4.28-3.05 6.52-4.42 2.17-1.34 4.52-1.74 6.68 0 2.28 1.84 2.76 4.18 2.12 7.11-2.14 9.92-6.61 18.89-10.84 27.98-3.94 8.48-8.34 16.8-11.43 27.12 10.16-3.67 17.25-9.53 24.59-14.88 9.18-6.69 18.14-13.73 28.7-18.22 2.6-1.1 5.43-2.92 8.13-.42 2.76 2.56 1.01 5.41-.05 8.06-5.75 14.48-16.35 25.85-24.72 38.66-2.89 4.44-7.3 8.29-7.2 15.57 16.29-7.6 31.72-14.87 47.21-21.99 3.56-1.63 7.12-3.42 11.27-3.34 6.16.13 8.05 2.89 5.54 8.61-1.95 4.44-5.21 7.9-8.48 11.39-10.7 11.37-22.84 21.35-33.63 34.3 10.52 1.33 19.42-1.88 28.35-3.94 7.46-1.72 14.9-3.35 22.47-4.54 4.34-.69 9.01-1.52 11.26 2.94 2.52 5-1.21 8.72-4.93 11.32-11.05 7.73-22.39 15.03-33.47 22.69-2.86 1.98-8.22 3.31-6.91 7.46 1.05 3.35 6.16 2.08 9.45 2 14.31-.32 28.6-1.12 42.91-1.37 2.65-.05 7.03-2.49 7.94 2.38.83 4.5.24 8.83-4.74 11.48-9.15 4.87-19.15 7.54-28.6 11.56-4.84 2.06-10 3.42-14.8 5.56-2.63 1.18-7.23 1.47-6.79 5.24.35 2.89 4.34 3.24 7.28 3.72 9.12 1.45 18.22 3 27.34 4.52 6.52 1.07 13.05 2.04 19.53 3.24 3.9.72 6.91 2.35 6.91 7.19-.02 4.77-2.87 6.45-6.85 7.23-15.78 3.1-31.57 6.16-47.35 9.25-2.03.4-4.98.02-5.43 2.38-.53 2.7 2.27 4.12 4.36 4.97 8.8 3.55 17.69 6.82 26.57 10.17 4.44 1.68 8.93 3.24 13.35 4.95 4.34 1.68 7.51 4.7 6.72 9.55-.83 5.24-5.45 4.79-9.47 4.93-13.77.48-27.55 1.02-41.31 1.57-2.35.1-5.72-.53-6.52 1.77-1.04 2.97 2.54 4.36 4.49 5.62 11.31 7.33 22.85 14.31 34.24 21.51 2.44 1.55 4.68 3.45 6.87 5.35 3.48 3.02 3.93 7.23 2.12 10.86-1.61 3.24-5.56 2.57-8.66 1.92-12.63-2.67-25.2-5.7-37.86-8.19-4.79-.94-9.58-2.91-15.78-1.53 4.28 7.86 10.59 13.03 16.64 18.32 7.81 6.8 15.62 13.59 21.49 22.2 2.08 3.05 3.91 6.53 1.17 10.25-2.73 3.69-6.29 1.93-9.47 1.02-15.31-4.36-29.02-12.6-43.74-18.43-2.57-1.02-4.87-3.45-8.37-1.71 2.36 7.81 7.92 13.56 12.54 19.87 6.08 8.34 12.62 16.38 16.75 25.93 1.55 3.58 3.75 7.89.45 11.13-3.66 3.59-7.84 1.07-11.63-.96-12.18-6.53-22.68-15.54-34.17-23.06-2.84-1.87-5.83-3.5-9.37-5.61-1.05 5.21 1.53 8.77 3 12.36 3.9 9.52 8.3 18.83 12.42 28.27 1.49 3.39 2.78 6.8 3.13 10.57.27 2.95.99 6.21-2.01 7.9-2.92 1.63-6.13.96-8.97-1.01-7.43-5.16-14.24-11-20.49-17.55-5.97-6.26-12.1-12.34-20.57-17.3.81 13.1 5.11 24.39 7.87 36.01 1.41 5.89 3 11.77 3.96 17.74.42 2.6 1.55 6.28-1.88 7.83-3.27 1.47-6.95 1.04-9.76-1.36a36.707 36.707 0 0 1-6.34-7.01c-7.51-10.89-14.8-21.93-22.21-32.87-1.45-2.16-2.67-4.63-6.31-5.64-2.04 10.86-1.34 21.69-.56 32.37.62 8.48 1.13 16.94 1.05 25.42-.02 2.46 2.25 6.34-2.38 7.12-3.7.61-7.67.53-9.77-3.45-2.46-4.66-4.81-9.41-6.85-14.26-3.91-9.23-7.52-18.59-11.35-27.83-1.5-3.63-3.32-7.11-6.87-10.48-4.98 10.08-5.25 20.65-7.2 30.77-1.44 7.51-2.08 15.17-3.45 22.71-.73 4.06-1.42 8.91-7.27 8.7-5.09-.19-6.21-4.39-6.96-8.3-2.76-14.24-5.25-28.54-8.06-42.77-.73-3.74-.61-9.69-4.41-10.09-4.01-.42-4.79 5.59-6.18 9.02-4.74 11.72-8.93 23.68-13.46 35.48-1.04 2.68-2.6 5.19-4.07 7.68-1.76 2.97-4.7 3.35-7.68 2.78-3.26-.64-3.82-3.45-3.88-6.13-.18-8.48 0-16.98-.27-25.47-.29-8.74-.89-17.47-1.49-26.19-.08-1.21-.48-2.89-1.33-3.47-1.82-1.21-2.76.81-3.69 1.88-5.41 6.24-9.31 13.48-13.46 20.55-3.74 6.39-7.62 12.68-12.46 18.35-2.84 3.32-6.36 3.83-10.08 2.73-4.5-1.33-3.93-5.53-3.37-8.69 2.63-14.53 5.65-28.98 8.58-43.45.46-2.33 1.8-5.49-.13-6.76-2.87-1.88-4.63 1.68-6.24 3.37-8.4 8.83-16.58 17.89-24.77 26.91-3.77 4.14-7.86 7.84-12.62 10.83-2.68 1.68-5.46 2.14-8.24.46-3.26-1.96-2.25-4.82-1.57-7.75 3.26-13.73 10.49-25.87 15.46-38.9 1.94-5.39 4.62-10.53 5.42-17.75zm234.15-205.5c.05-24.63-11.74-49.44-30.21-63.7-23.2-17.9-49.83-11.55-62.25 14.87-14.76 31.4 2.24 78.59 33.65 93.41 19.43 9.17 38.93 4.42 50.24-12.92 6.17-9.48 8.98-20.22 8.57-31.66zM238.04 212.3c-.48-18.83-5.45-38.45-21.13-53.99-21.32-21.1-52.19-16.27-65.67 10.17-13.27 26.03-7.44 66.72 12.6 87.78 20.5 21.54 51.65 17.82 66.35-7.92 5.94-10.42 7.9-21.76 7.85-36.04z"/><path d="M279.24 173.53c-.1-11.58 4.57-19.26 13.46-22.88 7.97-3.24 16.86-.53 23.91 7.78 6.32 7.44 9.44 15.94 6.37 25.76-2.57 8.19-6.66 15.08-16.21 16.5-10.2 1.52-17.37-3.32-22.76-11.32-3.3-4.93-5.07-10.47-4.77-15.84zM222.33 197.63c-.08 14.77-8.18 24.39-20.2 24.99-11.63.57-22.8-10.62-24.61-24.66-1.77-13.8 6.12-25.07 18.68-26.69 13.05-1.66 23.83 7.06 25.84 21.02.3 2.08.24 4.22.29 5.34z"/></svg>